/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include <memory.h> /* for memset */
#include "rpc_blinkenlight_api.h"

/* Default timeout can be changed using clnt_control() */
static struct timeval TIMEOUT = { 25, 0 };

rpc_blinkenlight_api_getinfo_res *
rpc_blinkenlight_api_getinfo_1(CLIENT *clnt)
{
	static rpc_blinkenlight_api_getinfo_res clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	 if (clnt_call (clnt, RPC_BLINKENLIGHT_API_GETINFO, (xdrproc_t) xdr_void, (caddr_t) NULL,
		(xdrproc_t) xdr_rpc_blinkenlight_api_getinfo_res, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

rpc_blinkenlight_api_getpanelinfo_res *
rpc_blinkenlight_api_getpanelinfo_1(u_int arg1,  CLIENT *clnt)
{
	static rpc_blinkenlight_api_getpanelinfo_res clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call (clnt, RPC_BLINKENLIGHT_API_GETPANELINFO,
		(xdrproc_t) xdr_u_int, (caddr_t) &arg1,
		(xdrproc_t) xdr_rpc_blinkenlight_api_getpanelinfo_res, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

rpc_blinkenlight_api_getcontrolinfo_res *
rpc_blinkenlight_api_getcontrolinfo_1(u_int arg1, u_int arg2,  CLIENT *clnt)
{
	rpc_blinkenlight_api_getcontrolinfo_1_argument arg;
	static rpc_blinkenlight_api_getcontrolinfo_res clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	arg.arg1 = arg1;
	arg.arg2 = arg2;
	if (clnt_call (clnt, RPC_BLINKENLIGHT_API_GETCONTROLINFO, (xdrproc_t) xdr_rpc_blinkenlight_api_getcontrolinfo_1_argument, (caddr_t) &arg,
		(xdrproc_t) xdr_rpc_blinkenlight_api_getcontrolinfo_res, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

rpc_blinkenlight_api_setpanel_controlvalues_res *
rpc_blinkenlight_api_setpanel_controlvalues_1(u_int arg1, rpc_blinkenlight_api_controlvalues_struct valuelist,  CLIENT *clnt)
{
	rpc_blinkenlight_api_setpanel_controlvalues_1_argument arg;
	static rpc_blinkenlight_api_setpanel_controlvalues_res clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	arg.arg1 = arg1;
	arg.valuelist = valuelist;
	if (clnt_call (clnt, RPC_BLINKENLIGHT_API_SETPANEL_CONTROLVALUES, (xdrproc_t) xdr_rpc_blinkenlight_api_setpanel_controlvalues_1_argument, (caddr_t) &arg,
		(xdrproc_t) xdr_rpc_blinkenlight_api_setpanel_controlvalues_res, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

rpc_blinkenlight_api_controlvalues_struct *
rpc_blinkenlight_api_getpanel_controlvalues_1(u_int arg1,  CLIENT *clnt)
{
	static rpc_blinkenlight_api_controlvalues_struct clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call (clnt, RPC_BLINKENLIGHT_API_GETPANEL_CONTROLVALUES,
		(xdrproc_t) xdr_u_int, (caddr_t) &arg1,
		(xdrproc_t) xdr_rpc_blinkenlight_api_controlvalues_struct, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

rpc_param_result_struct *
rpc_param_get_1(rpc_param_cmd_get_struct cmd_get,  CLIENT *clnt)
{
	static rpc_param_result_struct clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call (clnt, RPC_PARAM_GET,
		(xdrproc_t) xdr_rpc_param_cmd_get_struct, (caddr_t) &cmd_get,
		(xdrproc_t) xdr_rpc_param_result_struct, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

rpc_param_result_struct *
rpc_param_set_1(rpc_param_cmd_set_struct cmd_set,  CLIENT *clnt)
{
	static rpc_param_result_struct clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call (clnt, RPC_PARAM_SET,
		(xdrproc_t) xdr_rpc_param_cmd_set_struct, (caddr_t) &cmd_set,
		(xdrproc_t) xdr_rpc_param_result_struct, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

rpc_test_cmdstatus_struct *
rpc_test_data_to_server_1(rpc_test_data_struct data,  CLIENT *clnt)
{
	static rpc_test_cmdstatus_struct clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call (clnt, RPC_TEST_DATA_TO_SERVER,
		(xdrproc_t) xdr_rpc_test_data_struct, (caddr_t) &data,
		(xdrproc_t) xdr_rpc_test_cmdstatus_struct, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

rpc_test_data_struct *
rpc_test_data_from_server_1(rpc_test_cmdstatus_struct data,  CLIENT *clnt)
{
	static rpc_test_data_struct clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call (clnt, RPC_TEST_DATA_FROM_SERVER,
		(xdrproc_t) xdr_rpc_test_cmdstatus_struct, (caddr_t) &data,
		(xdrproc_t) xdr_rpc_test_data_struct, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}
